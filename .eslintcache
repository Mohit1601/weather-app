[{"E:\\ReactJS\\REACT PROJECTS\\weather-app\\src\\index.js":"1","E:\\ReactJS\\REACT PROJECTS\\weather-app\\src\\App.js":"2","E:\\ReactJS\\REACT PROJECTS\\weather-app\\src\\reportWebVitals.js":"3"},{"size":517,"mtime":1612002854227,"results":"4","hashOfConfig":"5"},{"size":3102,"mtime":1619172538441,"results":"6","hashOfConfig":"5"},{"size":375,"mtime":1612002854227,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"16aovbb",{"filePath":"11","messages":"12","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13","usedDeprecatedRules":"10"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"E:\\ReactJS\\REACT PROJECTS\\weather-app\\src\\index.js",[],["17","18"],"E:\\ReactJS\\REACT PROJECTS\\weather-app\\src\\App.js",["19","20"],"import React, { useEffect, useState } from \"react\";\r\n\r\nconst dateBuilder = (d) => {\r\n  const months = [\r\n    \"January\",\r\n    \"February\",\r\n    \"March\",\r\n    \"April\",\r\n    \"May\",\r\n    \"June\",\r\n    \"July\",\r\n    \"August\",\r\n    \"September\",\r\n    \"October\",\r\n    \"November\",\r\n    \"December\",\r\n  ];\r\n\r\n  const days = [\r\n    \"Sunday\",\r\n    \"Monday\",\r\n    \"Tuesday\",\r\n    \"Wednesday\",\r\n    \"Thursday\",\r\n    \"Friday\",\r\n    \"Saturday\",\r\n  ];\r\n  const date = d.getDate();\r\n  const day = days[d.getDay()];\r\n  const month = months[d.getMonth()];\r\n  const year = d.getFullYear();\r\n\r\n  var dateString = day + \", \" + date + \" \" + month + \" \" + year;\r\n  return dateString;\r\n};\r\n\r\nconst base_url = process.env.REACT_APP_BASE_URL;\r\nconst api_key = process.env.REACT_APP_API_KEY;\r\n\r\nfunction App() {\r\n  const [query, setQuery] = useState(\"\");\r\n  const [weather, setWeather] = useState({});\r\n\r\n  var lat, lon;\r\n\r\n  useEffect(() => {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(\r\n        (position) => {\r\n          lat = position.coords.latitude;\r\n          lon = position.coords.longitude;\r\n          fetch(\r\n            `${base_url}weather?&units=metric&lat=${lat}&lon=${lon}&appid=${api_key}`\r\n          )\r\n            .then((res) => res.json())\r\n            .then((result) => {\r\n              setWeather(result);\r\n            });\r\n        },\r\n        (error) => {\r\n          console.error(error.message);\r\n        }\r\n      );\r\n    } else {\r\n      alert(\"Geolocation API is not supported by your browser.\");\r\n    }\r\n  }, [lat, lon]);\r\n\r\n  const search = (event) => {\r\n    if (event.key === \"Enter\") {\r\n      if (query !== \"\") {\r\n        const q = query.trim();\r\n        fetch(`${base_url}weather?q=${q}&units=metric&appid=${api_key}`)\r\n          .then((res) => res.json())\r\n          .then((result) => {\r\n            setWeather(result);\r\n            setQuery(\"\");\r\n          });\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={\r\n        typeof weather.main != \"undefined\"\r\n          ? weather.main.temp > 20\r\n            ? \"app warm\"\r\n            : \"app\"\r\n          : \"app\"\r\n      }\r\n    >\r\n      <main>\r\n        <div className=\"search-box\">\r\n          <input\r\n            className=\"search-bar\"\r\n            type=\"text\"\r\n            placeholder=\"Search City or Pincode\"\r\n            onChange={(e) => setQuery(e.target.value)}\r\n            value={query}\r\n            onKeyPress={search}\r\n          />\r\n        </div>\r\n        {typeof weather.main != \"undefined\" ? (\r\n          <div>\r\n            <div className=\"location-box\">\r\n              <div className=\"location\">\r\n                {weather.name}, {weather.sys.country}\r\n              </div>\r\n              <div className=\"date\">{dateBuilder(new Date())}</div>\r\n            </div>\r\n            <div className=\"weather-box\">\r\n              <div className=\"temp\">{Math.round(weather.main.temp)} Â°C</div>\r\n              <div className=\"weather\">{weather.weather[0].main}</div>\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","E:\\ReactJS\\REACT PROJECTS\\weather-app\\src\\reportWebVitals.js",[],["21","22"],{"ruleId":"23","replacedBy":"24"},{"ruleId":"25","replacedBy":"26"},{"ruleId":"27","severity":1,"message":"28","line":50,"column":17,"nodeType":"29","endLine":50,"endColumn":41},{"ruleId":"27","severity":1,"message":"30","line":51,"column":17,"nodeType":"29","endLine":51,"endColumn":42},{"ruleId":"23","replacedBy":"31"},{"ruleId":"25","replacedBy":"32"},"no-native-reassign",["33"],"no-negated-in-lhs",["34"],"react-hooks/exhaustive-deps","Assignments to the 'lat' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","MemberExpression","Assignments to the 'lon' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.",["33"],["34"],"no-global-assign","no-unsafe-negation"]